public void delete(int num)
	{
		TreeNode temp = root;
		TreeNode previous = root;
		TreeNode toBeDeleted = root;
		TreeNode supertemp = root;
		TreeNode temp2 = root;
		boolean found = false;
		boolean thing = false;

		if (this.isEmpty())
			System.out.println("Nothing to be deleted");

		if (root.getInfo() == num)
		{
			if (root.getRight() == null && root.getLeft() == null)
				root = null; //if tree has only root

			else
			{
				toBeDeleted = temp;
				temp = temp.getRight();
				//find right, then all the way left... same as when it has two children

					temp = getFarthestLeft(temp);
					System.out.println("temp: " + temp.getInfo() + " toBeDeleted: " + toBeDeleted.getInfo());

					    temp2.setInfo(toBeDeleted.getInfo());
						toBeDeleted.setInfo(temp.getInfo());
						temp.setInfo(temp2.getInfo());

						System.out.println("Temp: " + temp.getInfo() + " toBeDeleted: " + toBeDeleted.getInfo());

						delete(temp.getInfo()); //issue
						return;


			}
		}

		else
		{
			while (!found)
			{
				if (num < temp.getInfo())
				{
					if (temp.getLeft() != null)
					{
						previous = temp;
						temp = temp.getLeft();
					}
					else
					{
						System.out.println(num + " is not in tree");
						return;
					}
				}

				if (num > temp.getInfo())
				{
					if (temp.getRight() != null)
					{
						previous = temp;
						temp = temp.getRight();
					}
					else
					{
						System.out.println(num + " is not in tree");
						return;
					}
				}
				if (num == temp.getInfo())
				{
					found = true;
				}
			}

			//!!we have found node!!
			if (num == temp.getInfo())
			{
				//finding node to be deleted's children
				if (hasNoChildren(temp))
				{
					if (isLeftFrom(temp, previous))
						previous.setLeft(null);
					else
						previous.setRight(null);
				}
				if (hasOneChildLeft(temp))
				{
					if (isRightFrom(temp, previous))
						previous.setRight(temp.getLeft());
					else
						previous.setLeft(temp.getLeft());
				}
				if (hasOneChildRight(temp))
				{
					if (isLeftFrom(temp, previous))
						previous.setLeft(temp.getRight());
					else
						previous.setRight(temp.getRight());
				}
				if (hasTwoChildren(temp))
				{
					toBeDeleted = temp;
					temp = temp.getRight();
					while (!thing)
					{
						if (temp.getLeft() != null)
						{
							previous = temp;
							temp = temp.getLeft();
							System.out.println("heyyyy");
						}
						else if (temp.getLeft() == null)
						{
							thing = true;
							supertemp = temp;
							previous.setLeft(supertemp);
							temp.setInfo(toBeDeleted.getInfo());
							toBeDeleted.setInfo(supertemp.getInfo());
							temp = toBeDeleted;
							toBeDeleted = supertemp;
							delete(toBeDeleted.getInfo()); //RECURSIVE but can only have one or no children so it never gets back here
						}
					thing = false;
					}
				}
			}
		}

		System.out.println("deleted " + num);
	}